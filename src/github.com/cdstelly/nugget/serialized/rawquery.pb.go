// Code generated by protoc-gen-go.
// source: rawquery.proto
// DO NOT EDIT!

/*
Package serialized is a generated protocol buffer package.

It is generated from these files:
	rawquery.proto

It has these top-level messages:
	QuerySet
	Query
	QueryReply
	FileInfo
*/
package serialized

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type QuerySet struct {
	Queries []*Query `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *QuerySet) Reset()         { *m = QuerySet{} }
func (m *QuerySet) String() string { return proto.CompactTextString(m) }
func (*QuerySet) ProtoMessage()    {}

func (m *QuerySet) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

type Query struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}

type QueryReply struct {
	Reply string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *QueryReply) Reset()         { *m = QueryReply{} }
func (m *QueryReply) String() string { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()    {}

type FileInfo struct {
	Id                string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Filenames         []string `protobuf:"bytes,2,rep,name=filenames" json:"filenames,omitempty"`
	Createtime        int64    `protobuf:"varint,3,opt,name=createtime" json:"createtime,omitempty"`
	Modifytime        int64    `protobuf:"varint,4,opt,name=modifytime" json:"modifytime,omitempty"`
	Accesstime        int64    `protobuf:"varint,5,opt,name=accesstime" json:"accesstime,omitempty"`
	Emodifytime       int64    `protobuf:"varint,6,opt,name=emodifytime" json:"emodifytime,omitempty"`
	Fflags            string   `protobuf:"bytes,7,opt,name=fflags" json:"fflags,omitempty"`
	Flags             string   `protobuf:"bytes,8,opt,name=flags" json:"flags,omitempty"`
	Filesize          uint64   `protobuf:"varint,9,opt,name=filesize" json:"filesize,omitempty"`
	Reconstructeddata [][]byte `protobuf:"bytes,10,rep,name=reconstructeddata,proto3" json:"reconstructeddata,omitempty"`
	Beenreconstructed bool     `protobuf:"varint,11,opt,name=beenreconstructed" json:"beenreconstructed,omitempty"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}

func init() {
}

// Client API for QueryService service

type QueryServiceClient interface {
	QueryNugget(ctx context.Context, in *QuerySet, opts ...grpc.CallOption) (QueryService_QueryNuggetClient, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryNugget(ctx context.Context, in *QuerySet, opts ...grpc.CallOption) (QueryService_QueryNuggetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_QueryService_serviceDesc.Streams[0], c.cc, "/serialized.QueryService/QueryNugget", opts...)
	if err != nil {
		return nil, err
	}
	x := &queryServiceQueryNuggetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QueryService_QueryNuggetClient interface {
	Recv() (*QueryReply, error)
	grpc.ClientStream
}

type queryServiceQueryNuggetClient struct {
	grpc.ClientStream
}

func (x *queryServiceQueryNuggetClient) Recv() (*QueryReply, error) {
	m := new(QueryReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for QueryService service

type QueryServiceServer interface {
	QueryNugget(*QuerySet, QueryService_QueryNuggetServer) error
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryNugget_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuerySet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).QueryNugget(m, &queryServiceQueryNuggetServer{stream})
}

type QueryService_QueryNuggetServer interface {
	Send(*QueryReply) error
	grpc.ServerStream
}

type queryServiceQueryNuggetServer struct {
	grpc.ServerStream
}

func (x *queryServiceQueryNuggetServer) Send(m *QueryReply) error {
	return x.ServerStream.SendMsg(m)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serialized.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryNugget",
			Handler:       _QueryService_QueryNugget_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for FileService service

type FileServiceClient interface {
	Stream_FileInfo(ctx context.Context, in *QuerySet, opts ...grpc.CallOption) (FileService_Stream_FileInfoClient, error)
}

type fileServiceClient struct {
	cc *grpc.ClientConn
}

func NewFileServiceClient(cc *grpc.ClientConn) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) Stream_FileInfo(ctx context.Context, in *QuerySet, opts ...grpc.CallOption) (FileService_Stream_FileInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FileService_serviceDesc.Streams[0], c.cc, "/serialized.FileService/Stream_FileInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceStream_FileInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_Stream_FileInfoClient interface {
	Recv() (*FileInfo, error)
	grpc.ClientStream
}

type fileServiceStream_FileInfoClient struct {
	grpc.ClientStream
}

func (x *fileServiceStream_FileInfoClient) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FileService service

type FileServiceServer interface {
	Stream_FileInfo(*QuerySet, FileService_Stream_FileInfoServer) error
}

func RegisterFileServiceServer(s *grpc.Server, srv FileServiceServer) {
	s.RegisterService(&_FileService_serviceDesc, srv)
}

func _FileService_Stream_FileInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QuerySet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).Stream_FileInfo(m, &fileServiceStream_FileInfoServer{stream})
}

type FileService_Stream_FileInfoServer interface {
	Send(*FileInfo) error
	grpc.ServerStream
}

type fileServiceStream_FileInfoServer struct {
	grpc.ServerStream
}

func (x *fileServiceStream_FileInfoServer) Send(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

var _FileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serialized.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream_FileInfo",
			Handler:       _FileService_Stream_FileInfo_Handler,
			ServerStreams: true,
		},
	},
}
